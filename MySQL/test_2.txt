create table goods
(
	goods_id int unsigned primary key auto_increment,
	goods_name varchar(128) not null,
	unitprice decimal(8, 2) not null,
	category varchar(64) not NULL comment '商品类别',
	provider varchar(128) comment '供应商'
);

create table customer
(
	customer_id int unsigned primary key auto_increment,
	name varchar(32) not null,
	address varchar(256),
	email varchar(128) unique key,
	sex enum('男', '女', '保密') not null default '保密',
	card_id char(18) unique key
);

create table purchase
(
	order_id int primary key auto_increment,
	customer_id int unsigned not null,
	goods_id int unsigned not null,
	nums int unsigned not null default 1,
	
	foreign key (customer_id) references customer(customer_id),
	foreign key (goods_id) references goods(goods_id)
);

create table myclass
(
	id int primary key,
	name varchar(30) not null comment '班级名'
);

create table stu
(
	id int primary key,
	name varchar(30) not null comment '学生名',
	class_id int,
	foreign key (class_id) references myclass(id)
);

create table stu1
(
	id int primary key,
	name varchar(30) not null comment '学生名',
	class_id int,
	foreign key (class_id) references myclass(id)
);

insert into myclass values (10, 'C++大牛班'), (20, 'java大神班');
insert into stu values (100, '张三', 10), (102, '李四', 20);
insert into stu values (101, '王五', 30);
insert into stu values (101, '王五', NULL);


create table students
(
	id int unsigned primary key auto_increment,
	sn int not null unique comment '学号',
	name varchar(20) not null,
	qq varchar(20)
);

insert into students values
(100, 10000, '唐三藏', null),
(101, 10001, '孙悟空', 11111),
(102, 20001, '曹孟德', null),
(103, 20002, '孙仲谋', null);

insert into students (id, sn, name) values (100, 10010, '唐大师');
insert into students (sn, name) values (20001, '曹阿瞒');
insert into students (id, sn, name) values (100, 10010, '唐大师')
on duplicate key update sn = 10010, name = '唐大师';

insert into students (id, sn, name) values (100, 10001, 'zhangsan')
on duplicate key update name = 'zhangsan';

insert into students (id, sn, name) values (103, 20005, 'lisi')
on duplicate key update name = 'lisi';

create table tt13
(
	id int unsigned primary key,
	name varchar(20) not null
);

replace into students (id, sn, name) values (104, 20001, '曹阿瞒');

--retrive
create table exam_result
(
	id int unsigned primary key auto_increment,
	name varchar(20) not null comment '同学姓名',
	yuwen float default 0.0 comment '语文成绩',
	shuxue float default 0.0 comment '数学成绩',
	yingyu float default 0.0 comment '英语成绩'
);

insert into exam_result (name, yuwen, shuxue, yingyu) values
	('唐三藏', 67, 98, 56),
	('孙悟空', 87, 78, 77),
	('猪无能', 88, 98, 90),
	('曹孟德', 82, 84, 67),
	('刘玄德', 55, 85, 45),
	('孙权', 70, 73, 78),
	('宋公明', 75, 65, 30);
	
select id, name, yuwen + shuxue + yingyu 总分 from exam_result;

select shuxue from exam_result;
select distinct shuxue from exam_result;
select distinct shuxue, yingyu from exam_result;

create table disttest(
	id int,
	sn char(1)
);

insert into disttest value
(1, 'a'),
(2, 'b'),
(2, 'b'),
(3, 'c'),
(3, 'c'),
(3, 'c');

create table disttesttmp like disttest;
insert into disttesttmp select distinct * from disttest;
drop table disttest;
rename table disttesttmp to disttest;
select name, yingyu from exam_result where yingyu < 60;
select name, yuwen from exam_result where yingyu < 60;
select name, yuwen from exam_result where yuwen >= 80 and yuwen <= 90;
select name, yuwen from exam_result where yuwen between 80 and 90;
select name, shuxue from exam_result where shuxue in (58, 59, 98, 99);
select name from exam_result where name like "孙%";
select name from exam_result where name like "孙__";
select name, yuwen, yingyu from exam_result where yuwen > yingyu;
select name, yuwen + shuxue + yingyu 总分 from exam_result
	where yuwen + shuxue + yingyu < 200;
select name, yuwen from exam_result
	where yuwen > 80 and name not like '孙%';
	
select name, yuwen, shuxue, yingyu, yuwen + shuxue + yingyu 总分
from exam_result where name like '孙_' or
(yuwen + shuxue + yingyu > 200 and yuwen < shuxue and yingyu > 80);

select name, yuwen, shuxue, yingyu, yuwen + shuxue + yingyu as total
from exam_result where total > 200 and yuwen < shuxue and yingyu > 80;--where后面用total找不到total
select name, qq from students order by qq;

select name, shuxue, yingyu, yuwen from exam_result
	order by shuxue desc, yingyu, yuwen;

select name, yuwen + yingyu + shuxue from exam_result
	order by yuwen + shuxue + yingyu desc;

select name, yuwen + yingyu + shuxue as 总分 from exam_result
	order by 总分 desc;

select name, shuxue from exam_result
	where name like '孙%' or name like '曹%'
	order by shuxue desc;

select id, name, shuxue, yingyu, yuwen from exam_result
	order by id limit 3 offset 0;

select id, name, shuxue, yingyu, yuwen from exam_result
	order by id limit 3, 8;
	
select name, shuxue, yuwen + shuxue + yingyu 总分 from exam_result
	order by 总分 limit 3;
	
update exam_result set shuxue = shuxue + 30
	where name in ('宋公明', '刘玄德', '曹孟德');
	
select name, shuxue, yuwen + shuxue + yingyu 总分 from exam_result
	where name in ('宋公明', '刘玄德', '曹孟德');
	
select name, shuxue, yuwen + shuxue + yingyu 总分 from exam_result
	order by 总分 limit 3;
	
update exam_result set yuwen = yuwen * 2;

select * from exam_result where name = '孙悟空';

delete from exam_result where name = '孙悟空';

create table for_delete
(
	id int primary key auto_increment,
	name varchar(20)
);

insert into for_delete (name) values ('A'), ('B'), ('C');
delete from for_delete;
insert into for_delete (name) value ('D');

create table for_truncate
(
	id int primary key auto_increment,
	name varchar(20)
);
insert into for_truncate (name) values ('A'), ('B'), ('C');
truncate for_truncate;
show create table for_truncate;
insert into for_truncate (name) values ('D');

create table duplicate_table(id int, name varchar(20));
insert into duplicate_table values
	(100, 'aaa'),
	(100, 'aaa'),
	(200, 'bbb'),
	(200, 'bbb'),
	(200, 'bbb'),
	(300, 'ccc');
	
create table no_duplicate_table like duplicate_table;
insert into no_duplicate_table select distinct * from duplicate_table;
rename table duplicate_table to old_duplicate_table,
	no_duplicate_table to duplicate_table;

select count(*) from students;
select count(1) from students;
select count(qq) from students;
select count(shuxue) from exam_result;
select count(distinct shuxue) from exam_result;
select sum(shuxue) from exam_result;
select sum(shuxue) from exam_result where shuxue < 60;
select avg(yuwen + shuxue + yingyu) 平均分 from exam_result;
select max(yingyu) from exam_result;
select min(shuxue) from exam_result where shuxue > 70;

create table students1
(
	id int unsigned,
	sn int not null unique comment '学号',
	name varchar(20) not null,
	qq varchar(20)
);

select deptno, avg(sal), max(sal), from emp group by deptno;
select avg(sal), min(sal), job, deptno from emp group by deptno, job;
select avg(sal) from emp group by deptno;
select deptno, avg(sal) as myavg from emp group by deptno having myavg < 2000;
select * from emp where (sal > 50 or job = 'MANAGER') and ename like 'J%';
select * from emp order by deptno, sal desc;
select ename, sal*12+ifnull(comm, 0) as '年薪' from emp order by 年薪 desc;
select ename, job from emp where sal = (select max(sal) from emp);

select ename, sal from emp where sal > (select avg(sal) from emp);
select deptno, format(avg(sal), 2), max(sal) from emp group by deptno;
select deptno, avg(sal) as avg_sal from emp group by deptno having avg_sal < 2000;
select job, count(*), format(avg(sal), 2) from emp group by job;

select * from emp, dept;
select emp.ename, emp.sal, dept.dname from emp, dept where emp.deptno = dept.deptno;
select ename, sal, dname from emp, dept where emp.deptno = dept.deptno and 
	emp.deptno = 10;
select ename, sal, grade from emp, salgrade where emp.sal between losal and hisal;
select empno, ename from emp where emp.empno=(select mgr from emp where ename='FORD');

select leader.empno, leader.ename from emp leader, emp worker where leader.empno = 
	worker.mgr and worker.ename = 'FORD';
	
select leader.empno, leader.ename from emp as leader, emp as worker where leader.empno = 
	worker.mgr and worker.ename = 'FORD';

select * from emp where deptno = (select deptno from emp where ename = 'smith');
select ename, job, sal, deptno from emp where job in 
	(select distinct job from emp where deptno = 10) and deptno<>10;
	
select ename, sal, deptno from emp where sal > all(select sal from emp where deptno=30);
select ename, sal, deptno from emp where sal > any(select sal from emp where deptno=30);

select ename from emp where (deptno, job) = (select deptno, job from emp 
	where ename='smith') and ename <> 'smith';
	
select ename, sal, job from emp where sal>2500 union 
	select ename, sal, job from emp where job = 'manager';
select ename, sal, job from emp where sal>2500 union all
	select ename, sal, job from emp where job = 'manager';

create view v_ename_dname as select ename, dname
	from emp, dept where emp.deptno = dept.deptno;

select * from v_ename_dname;
update v_ename_dname set dname='sales' where ename='clark';
select * from emp where ename='clark';
update emp set deptno=20 where ename='JAMES';
select * from v_ename_dname where ename='JAMES';
drop view v_ename_dname;

--在from字句中使用子查询
select ename, deptno, sal, format(asal, 2) from emp,
	(select avg(sal) asal, deptno dt from emp group by deptno) tmp
	where emp.sal > tmp.asal and emp.deptno = tmp.dt;

select emp.ename, emp.sal, emp.deptno, ms from emp,
	(select max(sal) ms, deptno from emp group by deptno) tmp
	where emp.deptno=tmp.deptno and emp.sal=tmp.ms;

select emp.ename, emp.sal, tmp.deptno, ms from emp,
	(select max(sal) ms, deptno from emp group by deptno) tmp
	where emp.deptno=tmp.deptno and emp.sal=tmp.ms;


select dept.dname, dept.deptno, dept.loc, count(*) '部门人数' from emp, dept
	where emp.deptno=dept.deptno
	group by dept.deptno, dept.dname, dept.loc;
	
select dept.dname, dept.deptno, dept.loc, count(*) '部门人数' from emp, dept
	where emp.deptno=dept.deptno
	group by dept.deptno;

select dept.deptno, dname, mycnt, loc from dept,
	(select count(*) mycnt, deptno from emp group by deptno) tmp
	where dept.deptno=tmp.deptno;
	





